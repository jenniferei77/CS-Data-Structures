/*
 * Augment doubly linked lists with row and column information.
 *
 * 15-122 Principles of Imperative Computation */

/*** Interface ***/
#use <conio>


typedef struct editor_header editor;
struct editor_header {
  tbuf* buffer;
  int row;
  int col;
};

bool is_editor(editor* E)
{
  if (E == NULL) return false;
  if (!is_tbuf(E->buffer)) return false;
  if (E->row != tbuf_row(E->buffer)) return false;
  if (E->col != tbuf_col(E->buffer)) return false;
  return true;
}

editor* editor_new()                  /* Creates a new, empty text buffer */
{
  editor* E = alloc(editor);
  E->buffer = tbuf_new();
  E->row = 1;
  E->col = 0;
  return E;
}
void editor_forward(editor* E)        /* Moves the cursor forward (right) */
//@requires is_editor(E);
{
  if (E->buffer->cursor != E->buffer->end)
  {
    E->buffer->cursor = E->buffer->cursor->next;
    if (E->buffer->cursor->prev->data == '\n')
    {
      E->row = E->row + 1;
      E->col = 0;
    }
    else
    {
      E->col = E->col + 1;
    }
  }
}

void editor_backward(editor* E)       /* Moves the cursor backward (left) */
//@requires is_editor(E);
{
  if (E->buffer->cursor != E->buffer->start->next)
  {
    E->buffer->cursor = E->buffer->cursor->prev;
    if (E->buffer->cursor->data == '\n')
    {
      E->row = E->row - 1;
      E->col = tbuf_col(E->buffer);
    }
    else
    {
      E->col = E->col - 1;
    }
  }
}

void editor_insert(editor* E, char c) /* Insert a character before cursor */
//@requires is_editor(E);
{
  if (E->buffer->cursor != E->buffer->start)
  {
    dll* nodeL = E->buffer->cursor->prev;
    dll* nodeR = E->buffer->cursor;
    dll* new = alloc(dll);
    new->data = c;
    new->next = nodeR;
    new->prev = nodeL;
    nodeL->next = new;
    nodeR->prev = new;
    if (c == '\n')
    {
      E->row = E->row + 1;
      E->col = 0;
    }
    else
    {
      E->col = E->col + 1;
    }
  }
}

void editor_delete(editor* E)         /* Remove character before cursor   */
//@requires is_editor(E);
{
  if (E->buffer->cursor != E->buffer->start->next)
  {
    dll* nodeL = E->buffer->cursor->prev->prev;
    dll* nodeR = E->buffer->cursor;
    dll* nodeDel = E->buffer->cursor->prev;

    nodeL->next = nodeR;
    nodeR->prev = nodeL;

    nodeDel->next = NULL;
    nodeDel->prev = NULL;

    if (nodeDel->data == '\n')
    {
      E->row = E->row - 1;
      E->col = tbuf_col(E->buffer);
    }
    else
    {
      E->col = E->col - 1;
    }
  }
}

void editor_up(editor* E)             /* Moves the cursor up              */
//@requires is_editor(E);
{
  //if cursor on first row, don't move up
  if (E->row != 1)
  {
    int temp_row = E->row;
    int row_orig = E->row;
    int col_orig = E->col;
    int temp_col = E->col;
    int stop = 0;
    //move left until stop = 1 
    while (stop != 1)
    {
      if (temp_col != 0)
      {
        temp_col = temp_col - 1;
      }
      E->buffer->cursor = E->buffer->cursor->prev;
      if (E->buffer->cursor->data == '\n')
      {
        temp_col = tbuf_col(E->buffer);
        //if moving from longer line to shorter line
        if (temp_col < E->col)
        {
          E->row = row_orig - 1;
          E->col = temp_col;
          stop = 1;
        }
      }
      if (temp_col == col_orig)
      {
        E->row = row_orig - 1;
        stop = 1;
      }   
    }
  }
}

void editor_down(editor* E)           /* Moves the cursor down            */
//@requires is_editor(E);
{

  if (!tbuf_at_right(E->buffer))
  {
    dll* orig_cursor = E->buffer->cursor;
    int temp_row = E->row;
    int row_orig = E->row;
    int col_orig = E->col;
    int temp_col = E->col;
    int stop = 0;
    int lines = 0;
    if (!tbuf_at_right(E->buffer))
    {
      editor_forward(E);
    }
    while (stop != 1)
    { 
      if (E->buffer->cursor->data == '\n')
      {
        lines++;
      }
      if (E->buffer->cursor == E->buffer->end)
      {    
        if (E->col != col_orig)
        {
          E->buffer->cursor = orig_cursor;
          E->row = row_orig;
          E->col = col_orig;
        }
        stop = 1;
      }
      else if (lines == 2)
      {
        stop = 1;
      }
      else if (E->col == col_orig)
      {
        stop = 1;
      }
      else
      {
        editor_forward(E);
      }      

    }  

  }
  
}
/*** Implementation ***/
