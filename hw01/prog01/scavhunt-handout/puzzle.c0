// Allows you to use I/O functions like print and println
#use <conio>
// Allows you to use string functions like string_join
#use <string>
// Allows you to use utility functions like abs() and min()
#use <util>

bool is_substring(string little, string big) {
  int len = string_length(little);
  int offset = string_length(big) - len;
  while (offset >= 0)
  //@loop_invariant offset <= string_length(big) - string_length(little);
  {
    if (string_equal(little, string_sub(big, offset, offset+len))) return true;
    offset--;
  }
  return false;
}

int common_prefix(string s1, string s2)
//@ensures 0 <= \result && \result <= string_length(s1);
//@ensures 0 <= \result && \result <= string_length(s2);
//@ensures string_equal(string_sub(s1, 0, \result), string_sub(s2, 0, \result));
/*@ensures \result == string_length(s1)
  @     || \result == string_length(s2)
  @     || string_charat(s1, \result) != string_charat(s2, \result); @*/
{
  char[] c1 = string_to_chararray(s1);
  char[] c2 = string_to_chararray(s2);
  if(string_equal(s1,s2)){
    return string_length(s1);
  }
  for (int i=0; i<=(min(string_length(s1), string_length(s2))); i++){
    if (c1[i] != c2[i]){
      if (i==0){
        return 0;
      }
      else{
        return i;
      }
    }
  }
  return 0;
}

int find_nonrepeating_position(string s)
//@requires string_length(s) > 0;
//@requires string_charat(s, 0) != string_charat(s, string_length(s) - 1);
//@ensures 0 <= \result && \result < string_length(s)-1;
//@ensures string_charat(s, \result) == string_charat(s, 0);
//@ensures string_charat(s, \result+1) != string_charat(s, 0);
{
  char[] c = string_to_chararray(s);
  char[] indivs = alloc_array(char, string_length(s));
  int dups = 0;
  for (int i=0; i<string_length(s); i++){
    for (int j=i+1; j<string_length(s); j++){
      if (c[i] == c[j]){
        dups = 1;
      }
    }
    if (i==0 && dups == 0){
      return 0;
    }
    else if (dups == 0){
      return i;
    }
    else {
      dups = 0;
    }
  }
  return string_length(s);
}

string same_start_end(string s)
//@ensures is_substring(\result, s);
/*@ensures string_length(s) < 128
  @     || (string_length(\result) > 1
  @         && string_charat(\result, 0)
  @            == string_charat(\result, string_length(\result) - 1)); @*/
{
  char[] c = string_to_chararray(s);
  for (int i=0; i<string_length(s); i++){
    for (int j=i+1; j<string_length(s); j++){
      if (c[i] == c[j]){
        string substr = string_sub(s, i, j+1);
        return substr;
      }
    }
  }
  return "";
}
